// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/forms": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "forms"
                ],
                "summary": "Obtener formulario general o de recursos para una jerarquía especifica",
                "operationId": "get-form",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tipo de formulario, que puede ser INFORMATION o RESOURCE",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Jerarquía del  formulario, por defecto solo se maneja general",
                        "name": "hierarchy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Form"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.Error"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "forms"
                ],
                "summary": "crear un nuevo formulario",
                "operationId": "create-form",
                "parameters": [
                    {
                        "description": "Crear Formulario",
                        "name": "form",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Form"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Form"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.Error"
                        }
                    }
                }
            }
        },
        "/hierarchies": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hierarchy"
                ],
                "summary": "Obtener la lista de jerarquias, agrupadas en Regiones-Provincias-Comunas",
                "operationId": "get-hierarchy",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Hierarchy"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.Error"
                        }
                    }
                }
            }
        },
        "/inventories": {
            "get": {
                "description": "Con este servicio se puede obtener el inventario.\nExisten 2 tipos de inventario, de información ( tag INFORMATION ) y recursos ( tag RESOURCE). El primero enfocado en las capacidades y el segundo en  información institucional.\nSiempre que se quiera obtener la información institucional en parámetro hierarchy debe ir “NACIONAL”.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventory"
                ],
                "summary": "Obtener inventario de una institución, para una jerarquía especifica",
                "operationId": "get-inventory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id de institución",
                        "name": "institution",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Tipo de jararquía de inventario solicitado",
                        "name": "hierarchy",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Id de la jerarquía solicitada, solo requerido si no es jerarquia nacional",
                        "name": "hierarchy_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "tipo de inventario solicitado (puede ser INFORMATION o RESOURCE)",
                        "name": "type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Inventory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "El body es un arreglo del objeto de respuesta que se muestra mas abajo\nCada respuesta debe ir en el arreglo del body (da lo mismo el orden)\nEs importantel agregar el index de la capacidad que se esta declarando",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventory"
                ],
                "summary": "Ingresar actualizaciones de inventario, para una institución",
                "operationId": "update-inventory",
                "parameters": [
                    {
                        "description": "Actualizar inventario",
                        "name": "inventory",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Inventory"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Inventory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Form": {
            "type": "object",
            "properties": {
                "creationDate": {
                    "type": "string"
                },
                "hierarchy": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "modifiedDate": {
                    "type": "string"
                },
                "sections": {
                    "type": "array",
                    "items": {}
                },
                "typeForm": {
                    "type": "string"
                }
            }
        },
        "model.Hierarchy": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "lat": {
                    "type": "string"
                },
                "lng": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "provincias": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "model.Inventory": {
            "type": "object",
            "properties": {
                "creationDate": {
                    "type": "string"
                },
                "details": {},
                "hierarchy": {
                    "type": "string"
                },
                "hierarchyId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "index": {
                    "type": "string"
                },
                "institucionId": {
                    "type": "string"
                },
                "modifiedDate": {
                    "type": "string"
                },
                "typeInvetory": {
                    "type": "string"
                }
            }
        },
        "util.Error": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8000",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Documentación Servicio formularios Pnrrd",
	Description: "Backend enfocado de formulario de jarquías para Pnrrd",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
